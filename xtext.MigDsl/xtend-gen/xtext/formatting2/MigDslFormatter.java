/**
 * generated by Xtext 2.27.0
 */
package xtext.formatting2;

import com.google.inject.Inject;
import dsl.Constraint;
import dsl.Mapping;
import dsl.Migration;
import dsl.MongoDb;
import dsl.RelationalDb;
import dsl.Table;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import xtext.services.MigDslGrammarAccess;

@SuppressWarnings("all")
public class MigDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MigDslGrammarAccess _migDslGrammarAccess;

  protected void _format(final Migration migration, @Extension final IFormattableDocument document) {
    document.<RelationalDb>format(migration.getRelationaldb());
    document.<MongoDb>format(migration.getMongodb());
    EList<Mapping> _mappings = migration.getMappings();
    for (final Mapping mapping : _mappings) {
      document.<Mapping>format(mapping);
    }
  }

  protected void _format(final RelationalDb relationalDb, @Extension final IFormattableDocument document) {
    EList<Table> _tables = relationalDb.getTables();
    for (final Table table : _tables) {
      document.<Table>format(table);
    }
    EList<Constraint> _constraints = relationalDb.getConstraints();
    for (final Constraint constraint : _constraints) {
      document.<Constraint>format(constraint);
    }
  }

  public void format(final Object migration, final IFormattableDocument document) {
    if (migration instanceof XtextResource) {
      _format((XtextResource)migration, document);
      return;
    } else if (migration instanceof Migration) {
      _format((Migration)migration, document);
      return;
    } else if (migration instanceof RelationalDb) {
      _format((RelationalDb)migration, document);
      return;
    } else if (migration instanceof EObject) {
      _format((EObject)migration, document);
      return;
    } else if (migration == null) {
      _format((Void)null, document);
      return;
    } else if (migration != null) {
      _format(migration, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(migration, document).toString());
    }
  }
}
