// automatically generated by Xtext
grammar xtext.MigDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Migration returns Migration:
	{Migration}
	'mappings' '{' (mappings+=Mapping)* '}' 
	(relationaldb=RelationalDb)? 
	(mongodb=MongoDb)?
	(options=Options)?
	;

Options returns Options:
	
	NEWLINE 'options'
	DataTypeMigration?='DataTypeMigration'
	AllowAdditionalFields?='AllowAdditionalFields'
	;

Constraint returns Constraint:
	Unique | NotNull | PrimaryKey | ForeignKey;

RelationalDb returns RelationalDb:
	NEWLINE 'source' NEWLINE
	(db=EString)? '/'(host=EString)? '/'(port=EString)? '/'(username=EString)? '/'(password=EString)? 
	(
	 NEWLINE tables+=Table ( 
	 NEWLINE tables+=Table)*
	)
	NEWLINE 'constraints'
	(
	 NEWLINE constraints+=Constraint ( 
	 NEWLINE constraints+=Constraint)*
	)
	;

MongoDb returns MongoDb:
	{MongoDb}
	NEWLINE
	'target' NEWLINE
	(db=EString)? '/'(host=EString)? '/'(port=EString)? '/'(username=EString)? '/'(password=EString)? 
	(
	NEWLINE collections+=MngCollection (
	NEWLINE collections+=MngCollection	)*
	)?
	;



EString returns ecore::EString:
	STRING | ID;


Table returns Table:
	{Table}
	name=EString
	'(' (columns+=Column ( "," columns+=Column)*)? ')'
	;


Column returns Column:
	{Column}
	name=EString;

Unique returns Unique:
	'Unique:'
	name=EString
	'uniqueColumns' '(' uniqueColumns+=[Column|EString] ( "," uniqueColumns+=[Column|EString])* ')' 
	;

NotNull returns NotNull:
	'NotNull:'
	name=EString
	'column' column=[Column|EString]
	;

PrimaryKey returns PrimaryKey:
	'PK:'
	name=EString
	'keyColumns' '(' keyColumns+=[Column|EString] ( "," keyColumns+=[Column|EString])* ')' 
	;

ForeignKey returns ForeignKey:
	name=EString
	referencing+=[Column|EString] ( "," referencing+=[Column|EString])* 'REFERENCES' refrenced+=[Column|EString] ( "," refrenced+=[Column|EString])* 
	;
	
MngCollection returns MngCollection:
	{MngCollection}
	name=EString
	'{'
		( fields+=Field ("," fields+=Field)* )?
	'}';


Field returns Field:
	{Field}	
	(type=FieldType)?
	name=EString
	('{' fields+=Field ("," fields+=Field)* '}' )?
	;


enum FieldType returns FieldType:
	Basic = 'Basic' | ListField = 'ListField' | ObjectField = 'ObjectField';



Mapping returns Mapping:
	DirectMapping | NestingList | NestingObject;
	
	
DirectMapping returns DirectMapping:
	{DirectMapping}
	'{'
		(name=EString)?
		'output:' output=EString
		'input:' column=[Column|EString]		
	'}';

NestingList returns NestingList:
	{NestingList}	
	'{'
		(name=EString)?
		'NESTING_LIST'
		'output:' output=EString
		'inputs:' foreignkey=[ForeignKey|EString] ('(' columns+=[Column|EString] ( "," columns+=[Column|EString])* ')' )?
		('AS' '(' fields+=[Field|EString] ( "," fields+=[Field|EString])* ')' )?
	'}';

NestingObject returns NestingObject:
	{NestingObject}
	'{'
		(name=EString)?
		'NESTING_OBJECT'
		'output:' output=EString
		'inputs:' foreignkey=[ForeignKey|EString] ('(' columns+=[Column|EString] ( "," columns+=[Column|EString])* ')' )?
		('AS' '(' fields+=[Field|EString] ( "," fields+=[Field|EString])* ')' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';


//terminal NEWLINE: '-' ('\r'? '\n')+;
//terminal NEWLINE: 'NEWLINE';
terminal NEWLINE: '-' '\n' '-';
